/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ReviewerGuardInterface extends utils.Interface {
  functions: {
    "addReviewer(address)": FunctionFragment;
    "applicationReg()": FunctionFragment;
    "applicationReviewReg()": FunctionFragment;
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "fetchReviews(uint96,address)": FunctionFragment;
    "getReviewers()": FunctionFragment;
    "multiSendBytesData()": FunctionFragment;
    "removeGuardBytesData()": FunctionFragment;
    "removeReviewer(address)": FunctionFragment;
    "reviewers(uint256)": FunctionFragment;
    "safeAddress()": FunctionFragment;
    "setApplicationReg(address)": FunctionFragment;
    "setApplicationReviewReg(address)": FunctionFragment;
    "setWorkspaceReg(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "threshold()": FunctionFragment;
    "updateThreshold(uint96)": FunctionFragment;
    "workspaceReg()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReviewer"
      | "applicationReg"
      | "applicationReviewReg"
      | "checkAfterExecution"
      | "checkTransaction"
      | "fetchReviews"
      | "getReviewers"
      | "multiSendBytesData"
      | "removeGuardBytesData"
      | "removeReviewer"
      | "reviewers"
      | "safeAddress"
      | "setApplicationReg"
      | "setApplicationReviewReg"
      | "setWorkspaceReg"
      | "supportsInterface"
      | "threshold"
      | "updateThreshold"
      | "workspaceReg"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReviewer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "applicationReg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applicationReviewReg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchReviews",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviewers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSendBytesData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardBytesData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReviewer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApplicationReg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApplicationReviewReg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkspaceReg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "workspaceReg",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applicationReviewReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSendBytesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardBytesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviewers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApplicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApplicationReviewReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkspaceReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workspaceReg",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ReviewerGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReviewerGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReviewer(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applicationReg(overrides?: CallOverrides): Promise<[string]>;

    applicationReviewReg(overrides?: CallOverrides): Promise<[string]>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      msgSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchReviews(
      _appId: PromiseOrValue<BigNumberish>,
      _applicantPaymentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getReviewers(overrides?: CallOverrides): Promise<[string[]]>;

    multiSendBytesData(overrides?: CallOverrides): Promise<[string]>;

    removeGuardBytesData(overrides?: CallOverrides): Promise<[string]>;

    removeReviewer(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    safeAddress(overrides?: CallOverrides): Promise<[string]>;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApplicationReviewReg(
      _applicationReviewReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateThreshold(
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workspaceReg(overrides?: CallOverrides): Promise<[string]>;
  };

  addReviewer(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applicationReg(overrides?: CallOverrides): Promise<string>;

  applicationReviewReg(overrides?: CallOverrides): Promise<string>;

  checkAfterExecution(
    txHash: PromiseOrValue<BytesLike>,
    success: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkTransaction(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    safeTxGas: PromiseOrValue<BigNumberish>,
    baseGas: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    refundReceiver: PromiseOrValue<string>,
    signatures: PromiseOrValue<BytesLike>,
    msgSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchReviews(
    _appId: PromiseOrValue<BigNumberish>,
    _applicantPaymentAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  getReviewers(overrides?: CallOverrides): Promise<string[]>;

  multiSendBytesData(overrides?: CallOverrides): Promise<string>;

  removeGuardBytesData(overrides?: CallOverrides): Promise<string>;

  removeReviewer(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  safeAddress(overrides?: CallOverrides): Promise<string>;

  setApplicationReg(
    _applicationReg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApplicationReviewReg(
    _applicationReviewReg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWorkspaceReg(
    _workspaceReg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  updateThreshold(
    _threshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workspaceReg(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addReviewer(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    applicationReg(overrides?: CallOverrides): Promise<string>;

    applicationReviewReg(overrides?: CallOverrides): Promise<string>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      msgSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchReviews(
      _appId: PromiseOrValue<BigNumberish>,
      _applicantPaymentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getReviewers(overrides?: CallOverrides): Promise<string[]>;

    multiSendBytesData(overrides?: CallOverrides): Promise<string>;

    removeGuardBytesData(overrides?: CallOverrides): Promise<string>;

    removeReviewer(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    safeAddress(overrides?: CallOverrides): Promise<string>;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApplicationReviewReg(
      _applicationReviewReg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    updateThreshold(
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    workspaceReg(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addReviewer(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applicationReg(overrides?: CallOverrides): Promise<BigNumber>;

    applicationReviewReg(overrides?: CallOverrides): Promise<BigNumber>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      msgSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchReviews(
      _appId: PromiseOrValue<BigNumberish>,
      _applicantPaymentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReviewers(overrides?: CallOverrides): Promise<BigNumber>;

    multiSendBytesData(overrides?: CallOverrides): Promise<BigNumber>;

    removeGuardBytesData(overrides?: CallOverrides): Promise<BigNumber>;

    removeReviewer(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApplicationReviewReg(
      _applicationReviewReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    updateThreshold(
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workspaceReg(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReviewer(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applicationReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applicationReviewReg(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      msgSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchReviews(
      _appId: PromiseOrValue<BigNumberish>,
      _applicantPaymentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReviewers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSendBytesData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGuardBytesData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReviewer(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApplicationReg(
      _applicationReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApplicationReviewReg(
      _applicationReviewReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWorkspaceReg(
      _workspaceReg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateThreshold(
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workspaceReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
